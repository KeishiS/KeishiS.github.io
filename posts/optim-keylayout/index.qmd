---
title: "最適輸送によるキー配列最適化"
description: "タイピングサイトで収集したキー入力計測データを使い，最適輸送の枠組みでキー配列を最適化"
author: KeishiS
date: 2025-05-28T00:00:00
categories: [Optimal Transport, KeyLayout]
image: /assets/computer.png
bibliography: ref.bib
csl: ieee.csl
---

## 注意書き

**この記事は筆者が取り組んでいる事の中間報告のためにまとめたものであり，出力された結果は暫定解です．未実装のアイディアがいくつかあるため，今後の更新も楽しみにお待ちいただきたく思います．**

## 前置き

もはや $n$ 番煎じのネタですが，自作キーボード沼にハマっている者としては取り組まざるを得ません．
ここで扱う対象は **物理的なキーと入力する文字をどのように対応付けるか** という問題です．

QWERTY 配列の問題点を改善した次世代の配列を手に入れようという取り組みは多くの方が行っており，
有名なものをいくつか挙げると Dvorak 配列 @The-Nation-s-Schools1933-fo ，
Colemak 配列，

学習コストや入力負担の軽減，タイピング速度の向上を目的に，多くの方が様々な配列を提案していますが，
個人的にモヤモヤしていた点として **どのような指標に基づいて最適化するか** がありました．

一般にホームポジションからなるべく動かずに多くの入力ができるのが良いとされており，定性的には同意できるのですが，
ホームポジション以外の場所のコストをどのように設定するかは決め打ちされていることが多いです．
またホームポジションからの物理的な距離でコストを設定しているケースもあり，直感に頼らない方針で賛同できる気持ちがある一方で，
例えば物理的な距離が同じでも小指と薬指では打ちやすさは違うよなぁ，と思う側面もありました．

以上を踏まえてこの記事は，直感的なパラメタ設定を一切せず最適化するためのアプローチの1つを提案するという思いでまとめています．

## 最適化の方針概要

キー配列を最適化する時，一般的に以下の設計が必要だと思います．

* データセット: 入力する対象の文字列
* 評価関数: 入力文字列を，指定のキー配列で入力した際の評価値
* 最適化アルゴリズム: 上記の評価値を最大化するようなキー配列を探すためのアルゴリズム

筆者が注目しているのは主に評価関数の作り方です．
一般的にはホームポジション行より1つ上や下の行のキー入力や小指による操作，
同じ指での連続入力に対して損失を与えるような評価関数が設計されると思います．

今回採用したのは， **Gromov-Wasserstein による入力文字と物理キーのマッチング** です．
より詳細には，入力文字の分布と2つの文字の距離(的なもの)をデータセットから作成します．
そして物理キーの分布は(現時点では)一様分布とし，2つの物理キーの距離はタイピングサイトで収集した計測時間として最適化問題を解きます．

まだ未実装のアイディアがあり，対象とした文字もアルファベットだけですが，現時点で最適化した結果は以下のとおりです．
片手側に母音が集まるという点からも悪くない配列が得られているように思います．

```shell
----------------------------------------------
    | 1 | 2 | 3 | 4 | 5 || 1 | 2 | 3 | 4 | 5 |
    |----------------------------------------|
  1 | F | C | T | H | V || G | X | J | E | P |
  2 | Z | N | R | L | S || A | U | I | O |   |
  3 | Y | M | B | W | D || Q | K |   |   |   |
----------------------------------------------
```

## 最適化問題の詳細

## タイピングサイトによる収集データ

一番大変だったのが計測データの収集です．私の把握する範囲において，キー入力の計測データを取得できるタイピングサイトは存在しません．
であれば自分で作るしかないと思い [つくっています](https://keylytix.app) ．現時点での実装状況は以下のとおりです．

* 実装済
  - ユーザ登録・ログイン
  - 英文・英単語でのタイピング画面
    * 2つのキー入力の遷移時間を計測
* 未実装
  - 計測データのダッシュボード
  - 計測データのエクスポート機能
  - 個別最適化の機能提供
  - 収集データの多様化
    * 誤入力分布の計測

まだ他ユーザへ機能提供できる状態ではありませんが，将来的には一般公開したいと考えています．

## その他と雑談

冒頭にも書いたようにまだこのアプローチは完遂していません．具体的には以下のアイディアも盛り込みたいと考えています．

* 誤入力情報の反映
* 計測の非対称性の考慮
  - (現時点で)Aキーを入力後にFキーを入力する遷移時間と，Fキー後にAキーを入力する遷移時間のズレ

どこかで区切りをつけて，QWERTY配列から最適化配列へ移行したいため，
上記2つを実装した段階で一区切りつけようと考えています．
